import groovyx.gpars.GParsPool
import net.masterthought.cucumber.ReportBuilder
apply plugin: 'groovy'
apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'maven'

group = 'cucumber'
version = '0.0.1'

description = """Cucumber-JVM template"""


buildscript {
    repositories {
        maven {
            url "http://repo.bodar.com"
        }
        mavenCentral()
    }

    dependencies {
        classpath "org.codehaus.gpars:gpars:1.2.1",
                "net.masterthought:cucumber-reporting:0.4.0"
    }
}

repositories {
    maven {
        url "http://repo.bodar.com"
    }
    mavenCentral()

}

dependencies {
    compile group: 'info.cukes', name: 'cucumber-java', version:'1.2.0'
    compile group: 'info.cukes', name: 'cucumber-testng', version:'1.2.0'
    compile group: 'info.cukes', name: 'cucumber-junit', version:'1.2.0'
    compile group: 'org.seleniumhq.selenium', name: 'selenium-java', version:'2.44.0'
    compile group: 'junit', name: 'junit', version:'4.11'
    compile group: 'log4j', name: 'log4j', version:'1.2.17'
    compile group: 'org.apache.poi', name: 'poi-ooxml', version:'3.9'
    compile group: 'org.apache.poi', name: 'poi', version:'3.11-beta3'
    compile group: 'xml-apis', name: 'xml-apis', version:'2.0.2'
    compile group: 'xerces', name: 'xercesImpl', version:'2.8.0'
}


task runInParallel {
    dependsOn assemble, compileTestJava, processTestResources
    doLast {
        def testProperties = "-DsomePropertie=somePropertie"
        runCucumberTests(testProperties, "~@BALA")
    }
}

def runCucumberTests(testProperties, tag) {
    def features = fileTree(dir: "${project.projectDir}/src/test/resources/features/").include '**/*.feature'
    try {
        GParsPool.withPool(4) {
            features.eachParallel { File file ->
                exec {
                    executable "sh"
                    args "-c", "mkdir -p ${reporting.baseDir}/cucumber" +
                            "&& java ${testProperties} " +
                            "-cp ${sourceSets.test.runtimeClasspath.asPath} " +
                            "cucumber.api.cli.Main " +
                            "--glue classpath:step_definitions " +
                            "${project.projectDir}/src/test/resources/features/${file.name} " +
                            "--plugin json:${reporting.baseDir}/cucumber/${file.name}.json " +
                            "--plugin pretty > ${reporting.baseDir}/cucumber/${file.name}.log " +
                            "--tags ${tag}"
                }
                println("${file.name}: Scenario output: ${reporting.baseDir}/cucumber/${file.name}.log ")
            }
        }
    }catch (e){}
    generateReport()
}

configurations {
    cucumberRuntime {
        extendsFrom testRuntime
    }
}

task runInSequence() {
    dependsOn assemble, compileTestJava, processTestResources
    doLast {
        def arglist = ["-p", "pretty", "-p", "json:${reporting.baseDir}/cucumber/cucumber.json", "--glue", "step_definitions",
                       "${project.projectDir}/src/test/resources/features"]

        return javaexec {
            main = "cucumber.api.cli.Main"
            classpath = sourceSets.test.runtimeClasspath
            args = arglist
        }
        generateReport()
    }
}

def generateReport() {
    def jsonReports = fileTree(dir: "${reporting.baseDir}/cucumber/").include '**/*.json'.toString()
    File reportOutputDirectory = new File("${reporting.baseDir}/cucumber");

    List<String> jsonReportFiles = new ArrayList<String>();
    jsonReports.each { File file ->
        jsonReportFiles.add("${reporting.baseDir}/cucumber/${file.name}".toString());
    }
    ReportBuilder reportBuilder = new ReportBuilder(
            jsonReportFiles,              // List<String> jsonReports,
            reportOutputDirectory,        // File reportDirectory
            "",                           // String pluginUrlPath
            "1988",                       // String buildNumber
            "cucumber-gradle-parallel",   // String buildProject,
            false,                        // boolean skippedFails,
            false,                        // boolean pendingFails,
            true,                         // boolean undefinedFails,
            false,                        // boolean missingFails
            false,                        // boolean flashCharts,
            true,                         // boolean runWithJenkins,
            false,                        // boolean artifactsEnabled,
            "",                           // String artifactConfig
            true,                         // boolean highCharts
            true                          // boolean parallelTesting
    );
    reportBuilder.generateReports();
    println("\nReport available on: ${reporting.baseDir}/cucumber/feature-overview.html")
}
